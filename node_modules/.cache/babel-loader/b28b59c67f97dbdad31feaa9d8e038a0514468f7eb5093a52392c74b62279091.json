{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Defines jumpToLine command. Uses dialog.js if present.\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../dialog/dialog\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../dialog/dialog\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  // default search panel location\n  CodeMirror.defineOption(\"search\", {\n    bottom: false\n  });\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {\n      value: deflt,\n      selectValueOnOpen: true,\n      bottom: cm.options.search.bottom\n    });else f(prompt(shortText, deflt));\n  }\n  function getJumpDialog(cm) {\n    return cm.phrase(\"Jump to line:\") + ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use line:column or scroll% syntax)\") + '</span>';\n  }\n  function interpretLine(cm, string) {\n    var num = Number(string);\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num;else return num - 1;\n  }\n  CodeMirror.commands.jumpToLine = function (cm) {\n    var cur = cm.getCursor();\n    dialog(cm, getJumpDialog(cm), cm.phrase(\"Jump to line:\"), cur.line + 1 + \":\" + cur.ch, function (posStr) {\n      if (!posStr) return;\n      var match;\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]));\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\n        cm.setCursor(line - 1, cur.ch);\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\n      }\n    });\n  };\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineOption","bottom","dialog","cm","text","shortText","deflt","f","openDialog","value","selectValueOnOpen","options","search","prompt","getJumpDialog","phrase","interpretLine","string","num","Number","test","getCursor","line","commands","jumpToLine","cur","ch","posStr","match","exec","setCursor","Math","round","lineCount","keyMap"],"sources":["D:/project/CollIDE/node_modules/codemirror/addon/search/jump-to-line.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Defines jumpToLine command. Uses dialog.js if present.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  // default search panel location\n  CodeMirror.defineOption(\"search\", {bottom: false});\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true, bottom: cm.options.search.bottom});\n    else f(prompt(shortText, deflt));\n  }\n\n  function getJumpDialog(cm) {\n    return cm.phrase(\"Jump to line:\") + ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use line:column or scroll% syntax)\") + '</span>';\n  }\n\n  function interpretLine(cm, string) {\n    var num = Number(string)\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num\n    else return num - 1\n  }\n\n  CodeMirror.commands.jumpToLine = function(cm) {\n    var cur = cm.getCursor();\n    dialog(cm, getJumpDialog(cm), cm.phrase(\"Jump to line:\"), (cur.line + 1) + \":\" + cur.ch, function(posStr) {\n      if (!posStr) return;\n\n      var match;\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]))\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\n        cm.setCursor(line - 1, cur.ch);\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\n      }\n    });\n  };\n\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}